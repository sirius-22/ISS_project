System cargoservice

//================ MESSAGES AND EVENTS ===================================

// ClientSimulator -> CargoService
Request loadrequest:	loadrequest(PID)

// CargoService -> ProductService
Request getProduct 		: product( PID ) 

 // ProductService -> CargoService
Reply   getProductAnswer: product( JSonString ) for getProduct 

// CargoService -> ClientSimulator

Reply loadaccepted:		loadaccepted(Slot) for loadrequest
Reply loadrejected:		loadrejected(Error) for loadrequest // Error={ too_heavy, no_slots, no_PID }

// slotmanagement in forse
// CargoService -> SlotManagement
Request freeSlot : freeSlot(M)
Request totalWeightReq: totalWeightReq(M)

Dispatch updatedatahold : updatedatahold(M)
// SlotManagement -> CargoService

Reply slotname : slotname(Slot) for freeSlot // Slot = SlotN or NONE
Reply totalWeight : totalWeight(Weight) for totalWeightReq

//

//CargoService -> CargoRobot
Request loadcontainer:		loadcontainer(Slot)

// CargoRobot -> CargoService

Reply containerloaded : containerloaded(M) for loadcontainer

//--------------------------------
// CargoRobot -> BasicRobot
Dispatch cmd:			cmd(M)
Event alarm: 		alarm(STOP) // to stop basicRobot

//basicrobot command
Request engage : engage(CALLER)
Reply engagedone : engagedone(ARG) for engage
Reply engagerefused : engagerefused(ARG) for engage

Dispatch disengage    : disengage(ARG)

Dispatch setdirection : dir( D )  //D =up|down|left|right

Request  doplan     : doplan( PATH, STEPTIME )
Reply doplandone    : doplandone( ARG )    for doplan
Reply doplanfailed  : doplanfailed( ARG )  for doplan

Request step       : step(TIME)
Reply stepdone     : stepdone(V)                 for step
Reply stepfailed   : stepfailed(DURATION, CAUSE) for step

Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)                    for moverobot
Reply moverobotfailed:  moverobotfailed(PLANDONE, PLANTODO) for moverobot

// sonar event

Event stopActions : stopActions(M)
Event resumeActions : resumeActions(M)
Event containerhere : containerhere(M)


// CONTEXTS ===================================================================
Context ctx_cargoservice		ip [host="localhost" port=11800]
//Context ctx_client_simulator	ip [host="localhost" port=11803]
Context ctx_basicrobot     ip [host="basicrobot24"   port=8020]
Context ctx_productservice ip [host="cargoserviceqak" port=8111]  

// ACTORS =====================================================================
ExternalQActor basicrobot context ctx_basicrobot
ExternalQActor productservice context ctx_productservice

// ACTORS for ctx_cargoservice ------------------------------------------------

QActor sonar_mock context ctx_cargoservice{
	State init initial{
		
	}Goto state_idle
	
	State state_idle{ 
		delay 5000
		emitlocalstream containerhere : containerhere(M)
		delay 3000
		emitlocalstream stopActions : stopActions(M)
		delay 3000
	}Goto resume
	
	State resume{
		emitlocalstream resumeActions : resumeActions(M)
		delay 3000
		
	}Goto state_idle
}

QActor slotmanagement_mock context ctx_cargoservice{
	State state_init initial{
		//setting Slot status
	}
	Goto idle
	
	State idle{
		//TODO transition on Slot update request from cargoservice, not implemented in the mock
		//(hold update after a load request is executed)
	}Transition t0 whenRequest freeSlot -> state_SlotState
					whenRequest totalWeightReq -> state_Weight
	
	State state_SlotState{
		// check slots update status
		replyTo freeSlot with slotname : slotname($Slot)
	}Goto idle
					
	State state_Weight{
		
		replyTo totalWeightReq with totalWeight : totalWeight($Weight)
	}
}



QActor cargorobot context ctx_cargoservice {
	import "main.java.map*"
	State state_init initial {
		
		//TODO init map
		[#
			val Map = MapServiceSingleton.init("map.json");
			
		#]
		
		subscribeTo sonar_mock for resumeActions
		subscribeTo sonar_mock for stopActions
		
//		forward cargoservicestatusgui -m updategui: updategui(M)
		//fixed coordinates
		[#
			var Homecoords = Map.getInstance().getCoordinates(Home);
			var Home_X = Homecoords.get("X");
			var Home_Y = Homecoords.get("Y");
			var Pupcoords = Map.getInstance().getCoordinates(Pickup);
			var Pup_X = Pupcoords.get("X");
			var Pup_Y = Pupcoords.get("Y");
	
		#]
		
		
		println("[CargoRobot] | Started ") color blue

	}
	Goto state_engage
	
	State state_engage{
		delay 3000
		println("[Cargorobot] | Requests engage to basicrobot ") color blue
		request basicrobot -m engage : engage("cargorobot") //arg=owner
	}Transition t1 whenReply engagedone -> returnHOME //to be sure of the initial position
					whenReply engagerefused ->state_engage //retry
	
	State state_idle {
//		forward cargoservicestatusgui -m updategui: updategui(M)
		println("[Cargorobot] | Idle ") color blue
	}
	Transition t0	//whenTime 5000		-> state_idle
					whenRequest loadcontainer	-> state_move_cont
					whenInterruptEvent stopActions -> state_wait_resume
					
	State state_wait_resume{
		println("[Cargorobot] | Stops ") color red
		emit alarm : alarm(STOP) 
	}Transition t1 whenEvent resumeActions -> state_resume
	
	State state_resume{
		println("[Cagorobot] | Resume ") color red
		returnFromInterrupt
	}
	
	State state_move_cont {
		onMsg(loadcontainer: movecontainer(Slot)){
			[# var SlotName =  payloadArg(0)
			
			var coords = Map.getCoordinates(SlotName);
			var X = coords.get("x");
			var Y = coords.get("y");
				
			#]
		}
		println("[Cargorobot] Moving container to slot $Slot...")
		// TODO
		// pickup 
		// move 
		// store
		
		//request basicrobot -m step : step(M)
		//forward basicrobot -m cmd : cmd(M)
		//request basicrobot -m doplan : doplan(MOVES)
		request basicrobot -m moverobot : moverobot($X,$Y)// coordinates
		
//		forward cargoservicestatusgui -m updategui: updategui(M)
		
		println("[cargoRobot] container transported")
	}Transition t3 whenReply moverobotdone -> returnHOME
					whenReply moverobotfailed -> goto_IO_port
					
		State returnHOME{
			println("Cargorobot | returningHome") color blue
			request basicrobot -m moverobot : moverobot($Home_X,$Home_Y)
			
		}Transition t0 whenReply moverobotdone -> state_idle
						whenReply moverobotfailed -> returnHOME
						whenInterruptEvent stopActions -> state_wait_resume
		
		State goto_IO_port{
			
		}Goto state_move_cont
}

QActor cargoservice context ctx_cargoservice {
	import "main.java.domain.*" 
	[#
		
		var Weight: Float = 0.0f

	#]
	State state_init initial {
//		[#
//			//initial status
//		#]
	
		subscribeTo sonar_mock for resumeActions
		subscribeTo sonar_mock for stopActions
		subscribeTo sonar_mock for containerhere
//		println("[CargoService] Reset")
//		
		discardMsg Off
	}
	Goto state_idle
//	
	State state_idle {
		println("[CargoService] Idle...")
		// wait for messages...
	}
	Transition t0	whenRequest loadrequest	-> state_handle_slots 
					whenInterruptEvent stopActions -> state_handle_stop
//					whenEvent distance 			-> state_handle_distance

					
	State state_handle_stop{
		
	}Transition t3 whenEvent resumeActions -> state_handle_resume
	
	State state_handle_resume{
		returnFromInterrupt
	}
	State state_handle_slots{
		
		request slotmanagement_mock -m freeSlot: freeSlot(m)
		
	}Transition t1 whenReply slotname -> state_handle_slot_name
					whenInterruptEvent stopActions -> state_handle_stop
	
	State state_handle_slot_name{
		onMsg(slotname : slotname(Name)){
		[#
			Name = payloadArg(0)
		
		#]
		}
		if [#
			!Name.equals("NONE")
		#]{
			replyTo loadrequest with loadrejected: loadrejected("no_slots")
		}
		else {
			replyTo loadrequest with loadaccepted: loadaccepted($Name)
			request cargorobot -m loadcontainer: loadcontainer($Name)
		}
	}Goto state_handle_load
	
	
	State state_handle_load {
		printCurrentMessage
		onMsg(loadrequest: loadrequest(PID)) {
			[#
				PID = payloadArg(0)
				
			#]
			} request productservice -m	 getProduct: getProduct($PID)
		}Transition t1 whenReply getProductAnswer -> state_handle_product
		whenInterruptEvent stopActions -> state_handle_stop
		
		State state_handle_product{
			onMsg(getProductAnswer: getProductAnswer(jsonString)){
				[#
					val jsonString = payloadArg(0)
					Weight = Product.getJsonInt(jsonStr, "weight")
				
				#]
				}
			request slotmanagement_mock -m totalWeightReq : totalWeightReq(M)
			}Transition t4 whenReply totalWeight -> state_handle_weight
							whenInterruptEvent stopActions -> state_handle_stop
			
			State state_handle_weight{
				onMsg(totalWeight: totalWeight(Weight)){
				[#
					TotWeight = payloadArg(0)
				
				#]
				}
			if	[#
					
					Weight + TotWeight <= MAXLOAD
					
				#] 
				{
			
				replyTo loadrequest with loadaccepted: loadaccepted($Slot)
				request cargorobot -m loadcontainer: loadcontainer($Slot)
				
//				//delay 1000 // pickup time (known)
			}
			else {
				replyTo loadrequest with loadrejected: loadrejected("too_heavy")
			}
//			forward cargoservicestatusgui -m updategui: updategui(M)
//			
		}
	Transition t2 whenReply containerloaded -> state_update_hold
	whenInterruptEvent stopActions -> state_handle_stop
	
	State state_update_hold{
		
		forward slotmanagement_mock -m updatedatahold: updatedatahold(M)
		
	}Goto state_idle
//	
//	State state_handle_distance {
//		onMsg(distance: distance(V)) {
//			if [# payloadArg(0).toFloat() >= DFREE#] {
//				// state_handle_stop
//				forward cargorobot -m stop: stop(M)
//				forward leddevice -m updateled : updateled("on")
//			} else {
//				// state_handle_resume
//				forward cargorobot -m resume: resume(M)
//				forward leddevice -m updateled : updateled("off")
//			}
//		}
//	}
//	Goto state_idle
}
