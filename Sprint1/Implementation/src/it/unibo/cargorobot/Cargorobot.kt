/* Generated by AN DISI Unibo */ 
package it.unibo.cargorobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.map.*

class Cargorobot ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
					MapServiceSingleton.init("map.json");
					var idle = true
					var X:Int? = 0
					var Y:Int? = 0
					var Map = MapServiceSingleton.getInstance()
					var SlotName = ""
					
				//forward cargoservicestatusgui -m updategui: updategui(M)
				//fixed coordinates
					var Homecoords = Map.getCoordinates("Home");
					var Home_X = Homecoords.get("X");
					var Home_Y = Homecoords.get("Y");
					var Pupcoords = Map.getCoordinates("Pickup");
					var Pup_X = Pupcoords.get("X");
					var Pup_Y = Pupcoords.get("Y");
					
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						subscribeToLocalActor("sonar_mock") 
						subscribeToLocalActor("sonar_mock") 
						CommUtils.outblue("[CargoRobot] | Started ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_engage", cond=doswitch() )
				}	 
				state("state_engage") { //this:State
					action { //it:State
						delay(3000) 
						CommUtils.outblue("[Cargorobot] | Requests engage to basicrobot, name: $MyName ")
						request("engage", "engage($MyName,330)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t12",targetState="state_wait_resume",cond=whenEvent("stopActions"),interruptedStateTransitions)
					transition(edgeName="t13",targetState="state_idle",cond=whenReply("engagedone"))
					transition(edgeName="t14",targetState="state_engage",cond=whenReply("engagerefused"))
				}	 
				state("state_idle") { //this:State
					action { //it:State
						CommUtils.outblue("[Cargorobot] | Idle ")
						idle=true 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t05",targetState="state_wait_resume",cond=whenEvent("stopActions"),interruptedStateTransitions)
					transition(edgeName="t06",targetState="goto_IO_port",cond=whenRequest("loadcontainer"))
				}	 
				state("state_wait_resume") { //this:State
					action { //it:State
						CommUtils.outred("[Cargorobot] | Stops ")
						emit("alarm", "alarm(STOP)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t17",targetState="state_resume",cond=whenEvent("resumeActions"))
				}	 
				state("state_resume") { //this:State
					action { //it:State
						CommUtils.outred("[Cagorobot] | Resume ")
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("state_move_cont") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("loadcontainer(Slot)"), Term.createTerm("movecontainer(SlotName)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 SlotName =  payloadArg(0)
											
											var coords = Map.getCoordinates(SlotName);
											X = coords.get("x");
											Y = coords.get("y");
												
						}
						CommUtils.outblack("[Cargorobot] Moving container to slot $SlotName...")
						request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						CommUtils.outblack("[cargoRobot] container transported")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t38",targetState="returnHOME",cond=whenReply("moverobotdone"))
					transition(edgeName="t39",targetState="goto_IO_port",cond=whenReply("moverobotfailed"))
				}	 
				state("returnHOME") { //this:State
					action { //it:State
						CommUtils.outblue("Cargorobot | returningHome, state: $idle")
						 
										X = Home_X
										Y = Home_Y
						request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t010",targetState="state_wait_resume",cond=whenEvent("stopActions"),interruptedStateTransitions)
					transition(edgeName="t011",targetState="state_idle",cond=whenReplyGuarded("moverobotdone",{idle 
					}))
					transition(edgeName="t012",targetState="goto_IO_port",cond=whenReplyGuarded("moverobotdone",{!idle 
					}))
				}	 
				state("goto_IO_port") { //this:State
					action { //it:State
						CommUtils.outblue("Cargorobot | go to IOport")
						 
										X = Pup_X
										Y = Pup_Y
						request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						 idle=false  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t013",targetState="state_wait_resume",cond=whenEvent("stopActions"),interruptedStateTransitions)
					transition(edgeName="t014",targetState="state_move_cont",cond=whenReply("moverobotdone"))
					transition(edgeName="t015",targetState="returnHOME",cond=whenReply("moverobotfailed"))
				}	 
			}
		}
} 
