/* Generated by AN DISI Unibo */ 
package it.unibo.cargoservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.domain.*

class Cargoservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				
				var Weight: Float = 0.0f
		
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						subscribeToLocalActor("sonar_mock") 
						subscribeToLocalActor("sonar_mock") 
						subscribeToLocalActor("sonar_mock") 
						discardMessages = false
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_idle") { //this:State
					action { //it:State
						CommUtils.outblack("[CargoService] Idle...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t012",targetState="state_handle_slots",cond=whenRequest("loadrequest"))
					interrupthandle(edgeName="t013",targetState="state_handle_stop",cond=whenEvent("stopActions"),interruptedStateTransitions)
				}	 
				state("state_handle_stop") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t314",targetState="state_handle_resume",cond=whenEvent("resumeActions"))
				}	 
				state("state_handle_resume") { //this:State
					action { //it:State
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("state_handle_slots") { //this:State
					action { //it:State
						request("freeSlot", "freeSlot(m)" ,"slotmanagement_mock" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t115",targetState="state_handle_slot_name",cond=whenReply("slotname"))
					interrupthandle(edgeName="t116",targetState="state_handle_stop",cond=whenEvent("stopActions"),interruptedStateTransitions)
				}	 
				state("state_handle_slot_name") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("slotname(Slot)"), Term.createTerm("slotname(Name)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											Name = payloadArg(0)
										
						}
						if( 
									!Name.equals("NONE")
						 ){answer("loadrequest", "loadrejected", "loadrejected("no_slots")"   )  
						}
						else
						 {answer("loadrequest", "loadaccepted", "loadaccepted($Name)"   )  
						 request("loadcontainer", "loadcontainer($Name)" ,"cargorobot" )  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_handle_load", cond=doswitch() )
				}	 
				state("state_handle_load") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("loadrequest(PID)"), Term.createTerm("loadrequest(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												PID = payloadArg(0)
												
						}
						request("getProduct", "getProduct($PID)" ,"productservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t117",targetState="state_handle_product",cond=whenReply("getProductAnswer"))
					interrupthandle(edgeName="t118",targetState="state_handle_stop",cond=whenEvent("stopActions"),interruptedStateTransitions)
				}	 
				state("state_handle_product") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("product(JSonString)"), Term.createTerm("getProductAnswer(jsonString)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
													val jsonString = payloadArg(0)
													Weight = Product.getJsonInt(jsonStr, "weight")
												
						}
						request("totalWeightReq", "totalWeightReq(M)" ,"slotmanagement_mock" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t419",targetState="state_handle_weight",cond=whenReply("totalWeight"))
					interrupthandle(edgeName="t420",targetState="state_handle_stop",cond=whenEvent("stopActions"),interruptedStateTransitions)
				}	 
				state("state_handle_weight") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("totalWeight(Weight)"), Term.createTerm("totalWeight(Weight)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
													TotWeight = payloadArg(0)
												
						}
						if( 
											
											Weight + TotWeight <= MAXLOAD
											
						 ){answer("loadrequest", "loadaccepted", "loadaccepted($Slot)"   )  
						request("loadcontainer", "loadcontainer($Slot)" ,"cargorobot" )  
						}
						else
						 {answer("loadrequest", "loadrejected", "loadrejected("too_heavy")"   )  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t221",targetState="state_update_hold",cond=whenReply("containerloaded"))
					interrupthandle(edgeName="t222",targetState="state_handle_stop",cond=whenEvent("stopActions"),interruptedStateTransitions)
				}	 
				state("state_update_hold") { //this:State
					action { //it:State
						forward("updatedatahold", "updatedatahold(M)" ,"slotmanagement_mock" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
			}
		}
} 
