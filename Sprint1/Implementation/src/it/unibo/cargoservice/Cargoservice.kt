/* Generated by AN DISI Unibo */ 
package it.unibo.cargoservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.domain.*

class Cargoservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				val MAXLOAD = 300
				
				//product weight
				var Weight = 0
				
				var rejected = false
				
				var Name = "NONE"
				var PID:Int? = 0
				
				var TotWeight = 0!!
				
				var JSonString = ""
		
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						subscribeToLocalActor("sonar_mock") 
						subscribeToLocalActor("sonar_mock") 
						subscribeToLocalActor("sonar_mock") 
						discardMessages = false
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_idle") { //this:State
					action { //it:State
						CommUtils.outblack("[CargoService] Idle...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t016",targetState="state_handle_stop",cond=whenEvent("stopActions"),interruptedStateTransitions)
					transition(edgeName="t017",targetState="state_handle_slots",cond=whenRequest("loadrequest"))
				}	 
				state("state_handle_stop") { //this:State
					action { //it:State
						CommUtils.outyellow("[CargoService] Ho ricevuto un evento di stop dal sonar in attesa di resume...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t318",targetState="state_handle_resume",cond=whenEvent("resumeActions"))
				}	 
				state("state_handle_resume") { //this:State
					action { //it:State
						CommUtils.outred("[CargoService] returning from interrupt...")
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("state_handle_slots") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("loadrequest(PID)"), Term.createTerm("loadrequest(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												PID = payloadArg(0).toInt()
												
						}
						CommUtils.outmagenta("[CargoService] | PID = $PID")
						CommUtils.outblue("[CargoService] Richiesta di slot liberi a slotmng...")
						request("freeSlot", "freeSlot(m)" ,"slotmanagement_mock" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t119",targetState="state_handle_stop",cond=whenEvent("stopActions"),interruptedStateTransitions)
					transition(edgeName="t120",targetState="state_handle_slot_name",cond=whenReply("slotname"))
				}	 
				state("state_handle_slot_name") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("slotname(Slot)"), Term.createTerm("slotname(Name)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											Name = payloadArg(0)
											
						}
						if( 
									Name.equals("NONE")
						 ){CommUtils.outred("[CargoService] Non ci sono slot disponibili LOADREJECTED")
						answer("loadrequest", "loadrejected", "loadrejected(no_slots)"   )  
						rejected=true 
						}
						else
						 {CommUtils.outred("[CargoService] slot disponibile $Name continuo i controlli")
						 rejected=false 
						 }
						forward("resume", "resume(gormiti)" ,name ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t021",targetState="state_handle_stop",cond=whenEvent("stopActions"),interruptedStateTransitions)
					transition(edgeName="t022",targetState="state_handle_load",cond=whenDispatchGuarded("resume",{!rejected 
					}))
					transition(edgeName="t023",targetState="state_idle",cond=whenDispatchGuarded("resume",{rejected 
					}))
				}	 
				state("state_handle_load") { //this:State
					action { //it:State
						CommUtils.outblue("[CargoService] | state_handle_load")
						request("getProduct", "product($PID)" ,"productservice" )  
						CommUtils.outgreen("[CargoService] | getProduct sent")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t124",targetState="state_handle_stop",cond=whenEvent("stopActions"),interruptedStateTransitions)
					transition(edgeName="t125",targetState="state_handle_product",cond=whenReply("getProductAnswer"))
				}	 
				state("state_handle_product") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("product(JSonString)"), Term.createTerm("product(JSonString)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
													JSonString = payloadArg(0).toString()
												
						}
						CommUtils.outblue("[CargoService] | state_handle_product")
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outmagenta("stringa json: $JSonString")
						
										var p = Product(JSonString)
										Weight=p.getWeight()	
						CommUtils.outgreen("[CargoService] | Weight: $Weight")
						request("totalWeightReq", "totalWeightReq(M)" ,"slotmanagement_mock" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t426",targetState="state_handle_stop",cond=whenEvent("stopActions"),interruptedStateTransitions)
					transition(edgeName="t427",targetState="state_handle_weight",cond=whenReply("totalWeight"))
				}	 
				state("state_handle_weight") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("totalWeight(Weight)"), Term.createTerm("totalWeight(Weight)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
													TotWeight = payloadArg(0).toInt()
												
						}
						if( 
											
											Weight.plus(TotWeight) <= MAXLOAD!!
											
						 ){answer("loadrequest", "loadaccepted", "loadaccepted($Name)"   )  
						request("loadcontainer", "loadcontainer($Name)" ,"cargorobot" )  
						}
						else
						 {answer("loadrequest", "loadrejected", "loadrejected(too_heavy)"   )  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t228",targetState="state_handle_stop",cond=whenEvent("stopActions"),interruptedStateTransitions)
					transition(edgeName="t229",targetState="state_update_hold",cond=whenReply("containerloaded"))
				}	 
				state("state_update_hold") { //this:State
					action { //it:State
						forward("updatedatahold", "updatedatahold(M)" ,"slotmanagement_mock" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
			}
		}
} 
