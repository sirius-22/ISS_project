/* Generated by AN DISI Unibo */ 
package it.unibo.sonar_mock

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Sonar_mock ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				var counter = 0	
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						delay(10000) 
						emitLocalStreamEvent("containerhere", "containerhere(si)" ) 
						 counter ++  
						delay(8000) 
						CommUtils.outmagenta("$name | $counter")
						if(  counter == 2  
						 ){CommUtils.outred("$name | STOP INTERRUPT $counter")
						emitLocalStreamEvent("stopActions", "stopActions(si)" ) 
						delay(8000) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_work", 
				 	 					  scope, context!!, "local_tout_"+name+"_work", 5000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t00",targetState="resume",cond=whenTimeout("local_tout_"+name+"_work"))   
				}	 
				state("resume") { //this:State
					action { //it:State
						CommUtils.outgreen("$name | resume actions")
						emitLocalStreamEvent("resumeActions", "resumeActions(si)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
} 
