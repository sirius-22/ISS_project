/* Generated by AN DISI Unibo */ 
package it.unibo.basicrobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Basicrobot ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "ss0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		val robot = uniborobots.robotSupport
		  
		  var StepTime      = 0L
		  var StartTime     = 0L     
		  var Duration      = 0L   
		  var RobotType     = "" 
		  var CurrentMove   = "unkknown"
		  var StepSynchRes  = false
		  var OwnerMngr     = supports.OwnerManager //Kotlin object
		  var AnswerKo      = "" 
		  
		  fun checkOwner( ) : Boolean {
		  	return OwnerMngr.checkOwner( currentMsg.msgSender() )
		  }
		return { //this:ActionBasciFsm
				state("ss0") { //this:State
					action { //it:State
						discardMessages = true
						delay(2000) 
						delegate("engage", "engager") 
						delegate("disengage", "engager") 
						delegate("doplan", "planexec") 
						delegate("getrobotstate", "robotpos") 
						delegate("setrobotstate", "robotpos") 
						delegate("moverobot", "robotpos") 
						delegate("setdirection", "robotpos") 
						delegate("getenvmap", "robotpos") 
						subscribeToLocalActor("basicrobot") 
						 robot.create(myself,"basicrobotConfig.json")  
						 RobotType = robot.robotKind  
						CommUtils.outblack("$name | RobotType=$RobotType   ")
						delay(2000) 
						CommUtils.outblack("$name | registerService +++++++++++   ")
						
									//if( CommUtils.ckeckEureka() )
									CommUtils.registerService( main.java.EurekaServiceConfig() )
						CommUtils.outmagenta("basicrobot | STARTING Sept 2024 no moves ... ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("waitForRobot") { //this:State
					action { //it:State
						delay(5000) 
						CommUtils.outmagenta("basicrobot | waitForRobot ... ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						discardMessages = false
						CommUtils.outmagenta("basicrobot  | waiting, working for ${OwnerMngr.owner} ... ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="doStep",cond=whenRequest("step"))
					transition(edgeName="t04",targetState="doStepBack",cond=whenRequest("stepback"))
					transition(edgeName="t05",targetState="execcmd",cond=whenDispatch("cmd"))
					transition(edgeName="t06",targetState="endwork",cond=whenDispatch("end"))
					transition(edgeName="t07",targetState="handlesonardata",cond=whenEvent("sonardata"))
					transition(edgeName="t08",targetState="handlealarmtest24",cond=whenEvent("alarm"))
				}	 
				state("handlealarmtest24") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						forward("cmd", "cmd(l)" ,name ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handlesonardata") { //this:State
					action { //it:State
						CommUtils.outyellow("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("sonar(DISTANCE)"), Term.createTerm("sonar(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "sonar(${payloadArg(0)})"  
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("execcmd") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if(    checkOwner()  
						 ){if( checkMsgContent( Term.createTerm("cmd(MOVE)"), Term.createTerm("cmd(MOVE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentMove = payloadArg(0)  
								robot.move( payloadArg(0)  )
								CommUtils.outmagenta("$name | execcmd $CurrentMove - updateResource & publish & emit")
								updateResourceRep( "moveactivated(${CurrentMove})"  
								)
								//val m = MsgUtil.buildEvent(name, "info", "info(done($CurrentMove))" ) 
								publish(MsgUtil.buildEvent(name,"info","info(done($CurrentMove))").toString(), "unibodisi" )   
								emit("info", "info(done($CurrentMove))" ) 
						}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("doStep") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if(    checkOwner()  
						 ){if( checkMsgContent( Term.createTerm("step(TIME)"), Term.createTerm("step(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									StepTime     = payloadArg(0).toLong()  	 
								updateResourceRep( "step(${StepTime})"  
								)
						}
						StartTime = getCurrentTime()
						 StepSynchRes = robot.dostep( StepTime )  
						}
						else
						 { AnswerKo = "youarenotowner"  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="stepok", cond=doswitchGuarded({ StepSynchRes  
					}) )
					transition( edgeName="goto",targetState="stepKo", cond=doswitchGuarded({! ( StepSynchRes  
					) }) )
				}	 
				state("stepok") { //this:State
					action { //it:State
						 StepSynchRes = false  
						robot.move( "h"  )
						updateResourceRep( "stepDone($StepTime)"  
						)
						answer("step", "stepdone", "stepdone($StepTime)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("stepKo") { //this:State
					action { //it:State
						if(  AnswerKo == ""  
						 ){Duration = getDuration(StartTime)
						robot.move( "h"  )
						 var TunedDuration   = StepTime - ((Duration * 0.80)).toLong()    
						if(  TunedDuration > 30  
						 ){robot.move( "s"  )
						delay(TunedDuration)
						robot.move( "h"  )
						updateResourceRep( "stepFail($Duration)"  
						)
						delay(300) 
						}
						answer("step", "stepfailed", "stepfailed($Duration,obst)"   )  
						}
						else
						 {answer("step", "stepfailed", "stepfailed($Duration,$AnswerKo)"   )  
						  AnswerKo = ""  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("doStepBack") { //this:State
					action { //it:State
						CommUtils.outgreen("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if(  checkOwner()  
						 ){if( checkMsgContent( Term.createTerm("stepback(TIME)"), Term.createTerm("stepback(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 StepTime = payloadArg(0).toLong()  
								updateResourceRep( "stepback($StepTime)"  
								)
						}
						StartTime = getCurrentTime()
						 StepSynchRes = robot.dostepback( StepTime )  
						}
						else
						 { AnswerKo = "youarenotowner"  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="stepBackOk", cond=doswitchGuarded({ StepSynchRes  
					}) )
					transition( edgeName="goto",targetState="stepBackKo", cond=doswitchGuarded({! ( StepSynchRes  
					) }) )
				}	 
				state("stepBackOk") { //this:State
					action { //it:State
						 StepSynchRes = false  
						robot.move( "h"  )
						updateResourceRep( "stepBackDone($StepTime)"  
						)
						answer("stepback", "stepbackdone", "stepbackdone($StepTime)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("stepBackKo") { //this:State
					action { //it:State
						if(  AnswerKo == ""  
						 ){Duration = getDuration(StartTime)
						robot.move( "h"  )
						 var TunedDuration   = StepTime - ((Duration * 0.80)).toLong()    
						if(  TunedDuration > 30  
						 ){robot.move( "w"  )
						delay(TunedDuration)
						robot.move( "h"  )
						updateResourceRep( "stepBackFail($Duration)"  
						)
						delay(300) 
						}
						answer("stepback", "stepbackfailed", "stepbackfailed($Duration,obst)"   )  
						}
						else
						 {answer("stepback", "stepbackfailed", "stepbackfailed($Duration,$AnswerKo)"   )  
						  AnswerKo = ""  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("endwork") { //this:State
					action { //it:State
						updateResourceRep( "basicrobot(end)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
