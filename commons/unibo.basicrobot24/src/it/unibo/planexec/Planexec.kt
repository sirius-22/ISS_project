/* Generated by AN DISI Unibo */ 
package it.unibo.planexec

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Planexec ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		val robot = uniborobots.robotSupport
		  var Plan          = ""
				var PlanOrig      = ""
				var PlanDone	  = ""
				var CurMoveTodo   = ""	
				var AlarmReceived = false	
				var StepTime      = "200"
				var OwnerMngr     = supports.OwnerManager //Kotlin object
				var IsOwner       = false
				var CurrentPlanId = 0
				var msgId = ""
				var isValid = false
				var PathTodoOnFail = "" 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="checkTheOwner",cond=whenRequest("doplan"))
				}	 
				state("checkTheOwner") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("doplan(PATH,STEPTIME,PLANID)"), Term.createTerm("doplan(PLAN,STEPTIME,PLANID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Plan       = payloadArg(0).replace("[","").replace("]","").replace(",","").replace(" ","")
											   PlanOrig   = Plan
											   PlanDone   = ""
											   AlarmReceived = false 
											   StepTime   = payloadArg(1)          //if int ...
								    		   val Caller = currentMsg.msgSender() //payloadArg(1) 
								    		   IsOwner    = OwnerMngr.checkOwner( Caller )
								    		   CurrentPlanId  = payloadArg(2).toInt()
								    		   PathTodoOnFail = ""
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="nextMove", cond=doswitchGuarded({ IsOwner  
					}) )
					transition( edgeName="goto",targetState="planrefused", cond=doswitchGuarded({! ( IsOwner  
					) }) )
				}	 
				state("nextMove") { //this:State
					action { //it:State
						 
								   if( Plan.length > 0  ){
								   	CurMoveTodo =  Plan.elementAt(0).toString() 
								   	Plan        =  Plan.removePrefix(CurMoveTodo)
								   }else{
								   	CurMoveTodo = ""
								   	Plan        = "empty"
								   } 		   
						if(  CurMoveTodo == ""  
						 ){forward("nomoremove", "nomoremove(end)" ,"planexec" ) 
						}
						else
						 {if(  CurMoveTodo == "w"  
						  ){delay(300) 
						 request("step", "step($StepTime,$CurrentPlanId)" ,"basicrobot" )  
						 }
						 else
						  {if(  CurMoveTodo == "s"  
						   ){request("stepback", "stepback($StepTime,$CurrentPlanId)" ,"basicrobot" )  
						  }
						  else
						   {robot.move( CurMoveTodo  )
						   forward("nextmove", "nextmove(goon)" ,"planexec" ) 
						   }
						  }
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="validateReply",cond=whenReply("stepfailed"))
					transition(edgeName="t010",targetState="validateReply",cond=whenReply("stepbackfailed"))
					transition(edgeName="t011",targetState="handleAlarm",cond=whenEvent("alarm"))
					transition(edgeName="t012",targetState="validateReply",cond=whenReply("stepcollided"))
					transition(edgeName="t013",targetState="validateReply",cond=whenReply("stepbackcollided"))
					transition(edgeName="t014",targetState="planend",cond=whenDispatch("nomoremove"))
					transition(edgeName="t015",targetState="handleTurnAndUpdate",cond=whenDispatch("nextmove"))
					transition(edgeName="t016",targetState="validateReply",cond=whenReply("stepdone"))
					transition(edgeName="t017",targetState="validateReply",cond=whenReply("stepbackdone"))
				}	 
				state("validateReply") { //this:State
					action { //it:State
						CommUtils.outgray("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						
						          val content = currentMsg.msgContent()
									
									val planIdInMsgStr = content.substringAfterLast(",").substringBefore(")").trim()
									var planIdInMsg = -1
									try{
										planIdInMsg = planIdInMsgStr.toInt()
									}catch(e: Exception){}
						
								    isValid = (planIdInMsg == CurrentPlanId && CurrentPlanId != 0)
									msgId = currentMsg.msgId()
						if(  !isValid  
						 ){CommUtils.outred("$name | Discarding obsolete reply for plan $planIdInMsg (current is $CurrentPlanId): $currentMsg")
						}
						else
						 {if(  AlarmReceived  
						  ){CommUtils.outmagenta("$name | Final reply after alarm received: $currentMsg")
						 if(  msgId.contains("done") || msgId.contains("collided")  
						  ){ PlanDone += CurMoveTodo 
						 						PathTodoOnFail = Plan 
						 						
						 }
						 else
						  {PathTodoOnFail = CurMoveTodo + Plan 
						  }
						 }
						 }
						forward("resume", "resume(go)" ,name ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t018",targetState="work",cond=whenDispatchGuarded("resume",{ !isValid  
					}))
					transition(edgeName="t019",targetState="failThePlan",cond=whenDispatchGuarded("resume",{ isValid && AlarmReceived  
					}))
					transition(edgeName="t020",targetState="handleStepDoneAndUpdate",cond=whenDispatchGuarded("resume",{ isValid && (msgId == "stepdone" || msgId == "stepbackdone") 
					}))
					transition(edgeName="t021",targetState="planInterruptedCollision",cond=whenDispatchGuarded("resume",{ isValid && (msgId == "stepcollided" || msgId == "stepbackcollided" ) 
					}))
					transition(edgeName="t022",targetState="planInterruptedLogical",cond=whenDispatchGuarded("resume",{ isValid && (msgId == "stepbackfailed " || msgId == "stepfailed") 
					}))
				}	 
				state("handleStepDoneAndUpdate") { //this:State
					action { //it:State
						 PlanDone += CurMoveTodo  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="nextMove", cond=doswitch() )
				}	 
				state("handleTurnAndUpdate") { //this:State
					action { //it:State
						 PlanDone += CurMoveTodo  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="nextMove", cond=doswitch() )
				}	 
				state("planInterruptedLogical") { //this:State
					action { //it:State
						CommUtils.outred("$name | Plan interrupted by logical failure. Move not performed.")
						 PathTodoOnFail = CurMoveTodo + Plan  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="failThePlan", cond=doswitch() )
				}	 
				state("planInterruptedCollision") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | Plan interrupted by collision. Move was performed.")
						 PlanDone += CurMoveTodo  
						 PathTodoOnFail = Plan  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="failThePlan", cond=doswitch() )
				}	 
				state("failThePlan") { //this:State
					action { //it:State
						
								    // Ora usiamo il valore corretto calcolato prima
								    val PathTodo = PathTodoOnFail
								    var SafePlanDone = if (PlanDone.isEmpty()) "n" else PlanDone
									var SafePathTodo = if (PathTodo.isEmpty()) "none" else PathTodo
						answer("doplan", "doplanfailed", "doplanfailed($SafePlanDone,$SafePathTodo)"   )  
						 CurrentPlanId = 0 
									AlarmReceived = false
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("planend") { //this:State
					action { //it:State
						if(  currentMsg.msgContent() == "alarm(disengaged)"  
						 ){}
						else
						 {if(  currentMsg.msgId() == "alarm"  
						  ){CommUtils.outblack("$name |  planend alarm $Plan $CurMoveTodo")
						  val Plantodo = CurMoveTodo + Plan  
						 answer("doplan", "doplanfailed", "doplanfailed($Plantodo)"   )  
						 }
						 else
						  {CommUtils.outblue("$name | planend ok plan=$PlanOrig ")
						  answer("doplan", "doplandone", "doplandone($PlanOrig)"   )  
						  updateResourceRep( "plandone($PlanOrig)"  
						  )
						  
						  		        CurrentPlanId = 0
						  		        AlarmReceived = false // Anche se dovrebbe essere già false, è buona pratica
						  }
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("planinterruptedobstacle") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outmagenta("$name |  planinterruptedobstacle $CurMoveTodo StepTime=$StepTime")
						 var Plantodo =  CurMoveTodo + Plan
						if( PlanDone.isEmpty() 
						 ){PlanDone = "n" 
						}
						updateResourceRep( "planfailed($PlanOrig,$Plantodo )"  
						)
						answer("doplan", "doplanfailed", "doplanfailed($PlanDone,$Plantodo)"   )  
						delay(200) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleAlarm") { //this:State
					action { //it:State
						CommUtils.outred("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( ( !AlarmReceived ) 
						 ){ AlarmReceived = true 
						CommUtils.outred("$name | ALARM RECEIVED! Halting robot and waiting for final reply.")
						forward("cmd", "cmd(h)" ,"basicrobot" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="awaitingFinalReplyAfterAlarm", cond=doswitch() )
				}	 
				state("awaitingFinalReplyAfterAlarm") { //this:State
					action { //it:State
						CommUtils.outblack("$name | ... awaiting final reply for plan $CurrentPlanId ...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t023",targetState="validateReply",cond=whenReply("stepdone"))
					transition(edgeName="t024",targetState="validateReply",cond=whenReply("stepbackdone"))
					transition(edgeName="t025",targetState="validateReply",cond=whenReply("stepfailed"))
					transition(edgeName="t026",targetState="validateReply",cond=whenReply("stepbackfailed"))
					transition(edgeName="t027",targetState="validateReply",cond=whenReply("stepcollided"))
					transition(edgeName="t028",targetState="validateReply",cond=whenReply("stepbackcollided"))
				}	 
				state("planinterruptedalarm") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t029",targetState="nonextmovesincealarm",cond=whenDispatch("nextmove"))
					transition(edgeName="t030",targetState="nonextmovesincealarm",cond=whenReply("stepdone"))
					transition(edgeName="t031",targetState="planinterruptedobstacle",cond=whenReply("stepfailed"))
					transition(edgeName="t032",targetState="nonextmovesincealarm",cond=whenReply("stepbackdone"))
					transition(edgeName="t033",targetState="planinterruptedobstacle",cond=whenReply("stepbackfailed"))
				}	 
				state("nonextmovesincealarm") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name |  nonextmovesincealarm $CurMoveTodo plantodo=$Plan")
						updateResourceRep( "planfailed($PlanOrig,$Plan )"  
						)
						if(  Plan.length == 0  
						 ){answer("doplan", "doplandone", "doplandone($PlanOrig)"   )  
						}
						else
						 {answer("doplan", "doplanfailed", "doplanfailed($Plan)"   )  
						 }
						delay(200) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("planrefused") { //this:State
					action { //it:State
						CommUtils.outred("$name | planrefused ")
						answer("doplan", "doplanfailed", "doplanfailed(youarenotowner)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
} 
