/* Generated by AN DISI Unibo */ 
package it.unibo.test1

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Test1 ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outblue("Inizio test..")
						delay(4000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="doAlarm", cond=doswitch() )
				}	 
				state("doAlarm") { //this:State
					action { //it:State
						delay(3000) 
						CommUtils.outred("test1 | mando segnale di allarme")
						emitLocalStreamEvent("alarm", "alarm(ala)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_doAlarm", 
				 	 					  scope, context!!, "local_tout_"+name+"_doAlarm", 5000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t00",targetState="stopAlarm",cond=whenTimeout("local_tout_"+name+"_doAlarm"))   
				}	 
				state("stopAlarm") { //this:State
					action { //it:State
						delay(10000) 
						CommUtils.outred("test1 | mando segnale di stop allarme")
						emitLocalStreamEvent("nooalarm", "nooalarm(no)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outyellow("test1 | idle")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
