/* Generated by AN DISI Unibo */ 
package it.unibo.test2interrupt

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Test2interrupt ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 var interruptdone = false  
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outyellow("test2interrupt | init")
						subscribeToLocalActor("test1") 
						subscribeToLocalActor("test1") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						CommUtils.outblue("test2interrupt | working")
						CommUtils.outblue("test2interrupt | working aspettendo")
						delay(20000) 
						CommUtils.outblue("test2interrupt | non si capisce nullaaa")
						request("testrequest", "testrequest(ciao)" ,"test_reply_after_interrupt" )  
						CommUtils.outblue("test2interrupt | working dopo il dispatch")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t01",targetState="state_wait_resume",cond=whenEvent("alarm"),interruptedStateTransitions)
					transition(edgeName="t02",targetState="funzioni",cond=whenReply("ok"))
				}	 
				state("funzioni") { //this:State
					action { //it:State
						CommUtils.outblue("test2interrupt | forse funziona")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("state_wait_resume") { //this:State
					action { //it:State
						CommUtils.outgreen("test2interrupt | Stops ")
						 interruptdone = true  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t13",targetState="state_resume",cond=whenEvent("nooalarm"))
				}	 
				state("state_resume") { //this:State
					action { //it:State
						CommUtils.outgreen("test2interrupt | Resume ")
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
