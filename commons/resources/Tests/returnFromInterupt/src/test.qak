System test

Event alarm : alarm(M)
Event nooalarm : nooalarm(M)

Dispatch aaaa : aaaa(A)

Context ctx_testing	ip [host="localhost" port=11800]

QActor test1 context ctx_testing {
	
	State init initial{
		println ("Inizio test..") color blue
		delay 4000
	}Goto doAlarm
	
	State doAlarm{
		delay 3000
		println ("test1 | mando segnale di allarme") color red
		emitlocalstream alarm : alarm(ala)
	}Transition t0 whenTime 5000 -> stopAlarm
	
	State stopAlarm{
		delay 10000
		println ("test1 | mando segnale di stop allarme") color red
		emitlocalstream nooalarm: nooalarm(no)
	}Goto idle
	   
	
	State idle{
		println ("test1 | idle") color yellow
	}
	
}

QActor test2interrupt context ctx_testing{
		[# var interruptdone = false #]
	State init initial{
		println ("test2interrupt | init") color yellow
		
		
		subscribeTo test1 for alarm
		subscribeTo test1 for nooalarm
	}Goto work
	
	State work{
		println ("test2interrupt | working") color blue
		
//		if [# interruptdone #]{
//			println ("test2interrupt | working dopo l'interrupt") color blue
//			[# interruptdone = false #]
//		}
		
		println ("test2interrupt | working aspettendo") color blue
		delay 20000
		println ("test2interrupt | non si capisce nullaaa") color blue
		autodispatch aaaa : aaaa(a)
		println ("test2interrupt | working dopo il dispatch") color blue
	}Transition t0	//whenTime
					 whenInterruptEvent alarm -> state_wait_resume
					 whenMsg aaaa -> funzioni
					
	State funzioni{
		println ("test2interrupt | forse funziona") color blue
	}
	
	
	State state_wait_resume{
		println("test2interrupt | Stops ") color green
		[# interruptdone = true #]
		 //returnFromInterrupt "wtf"
		 
		//println("test2interrupt | non ha fatto return ") color green
	
	}Transition t1 //whenTime 15000 -> funzioni
				whenEvent nooalarm -> state_resume
	
	State state_resume{
		println("test2interrupt | Resume ") color green
		returnFromInterrupt "wtf"
	}
}


// test prof 

//Dispatch cmd   : cmd(X)
//Event    alarm : alarm(X)
//
//Context ctxinterrupt ip [host="localhost" port=8045]
//
//QActor worker context ctxinterrupt{
//	State s0 initial{
//		println("STARTS") color blue
//	}	
//	Goto work 
//	 
//	State work{
//		println("WORKING ... ") color blue
//		delay 1000
//	}
//	Transition t0
//	    whenMsg cmd               -> handlecmd
//		whenInterruptEvent  alarm -> handlealarm
//	
//	State handlecmd{
//		printCurrentMessage color blue
//	}
//	Goto work 
//	
//	State handlealarm{
//		printCurrentMessage color black
//		if[# currentMsg.msgContent() == "alarm(tsunami)" #]{
//			println("WARNING tsunami ... ") color red
//			delay 1000
//			[# System.exit(0) #]
//		}
//		else{ returnFromInterrupt  }
//	}
//}
//
//QActor user context ctxinterrupt{
//	State s0 initial{
//		delay 500
//		println("forward  cmd(10) ") color cyan
//		forward worker -m cmd : cmd(10)
//		delay 500
//		println("forward  cmd(20) ") color cyan
//		forward worker -m cmd : cmd(20)
//		println("ENDS") color cyan
//	}		
//}
//
//
//QActor sentinel context ctxinterrupt{
//	State s0 initial{
//		delay 300
//		println("emits alarm(fire)") color magenta
//		emit alarm : alarm(fire)
//		delay 300
//		println("emits alarm(tsunami)") color magenta
//		emit alarm : alarm(tsunami)
//	}	
//}