/* Generated by AN DISI Unibo */ 
package it.unibo.cargoservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Cargoservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						
									//initial status
						subscribeToLocalActor("sonardevice") 
						CommUtils.outblack("[CargoService] Reset")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_idle") { //this:State
					action { //it:State
						CommUtils.outblack("[CargoService] Idle...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="state_handle_load",cond=whenRequest("loadrequest"))
					transition(edgeName="t06",targetState="state_handle_distance",cond=whenEvent("distance"))
				}	 
				state("state_handle_load") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("loadrequest(PID)"), Term.createTerm("loadrequest(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												PID = payloadArg(0)
												
						}
						request("productdatareq", "productdatareq($PID)" ,"productservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t17",targetState="state_handle_product",cond=whenReply("productdata"))
				}	 
				state("state_handle_product") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("productdata(Weight)"), Term.createTerm("productdata(Weight)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
													Weight = payloadArg(0)
												
						}
						if( 
											// empty slots && Weight<MAXLOAD
											
						 ){answer("loadrequest", "loadaccepted", "loadaccepted($Slot)"   )  
						forward("movecontainer", "movecontainer($Slot)" ,"cargorobot" ) 
						}
						else
						 {answer("loadrequest", "loadrejected", "loadrejected($M)"   )  
						 }
						forward("updategui", "updategui(M)" ,"cargoservicestatusgui" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_handle_distance") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("distance(D)"), Term.createTerm("distance(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  payloadArg(0).toFloat() >= DFREE 
								 ){forward("stop", "stop(M)" ,"cargorobot" ) 
								forward("updateled", "updateled("on")" ,"leddevice" ) 
								}
								else
								 {forward("resume", "resume(M)" ,"cargorobot" ) 
								 forward("updateled", "updateled("off")" ,"leddevice" ) 
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
			}
		}
} 
