/* Generated by AN DISI Unibo */ 
package it.unibo.observer

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import it.unibo.kactor.QakContext

class Observer ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						CommUtils.outblue("observer started")
						discardMessages = false
						delay(2000) 
						
						
							    val sysUtilClass = Class.forName("it.unibo.kactor.sysUtil")
							    val m = sysUtilClass.getDeclaredField("ctxsMap")
							    m.isAccessible = true
							    val ctxsMap = m.get(null) as Map<*, *>
							
							    println("== ctxsMap (contesti registrati) ==")
							    ctxsMap.forEach { (name, info) -> println("  $name -> $info") }
						    
						observeResource("localhost","8100","ctx_update","updater","changed")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="state_idle",cond=whenDispatch("changed"))
				}	 
				state("state_idle") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outblack("currentMsg=${currentMsg}")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
