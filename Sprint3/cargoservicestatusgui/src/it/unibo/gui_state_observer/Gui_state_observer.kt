/* Generated by AN DISI Unibo */ 
package it.unibo.gui_state_observer

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import it.unibo.kactor.QakContext

class Gui_state_observer ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name | Avvio e inizio ad osservare cargoservice...")
						
						
						   val sysUtilClass = Class.forName("it.unibo.kactor.sysUtil")
						    val m = sysUtilClass.getDeclaredField("ctxsMap")
						    m.isAccessible = true
						    val ctxsMap = m.get(null) as Map<*, *>
						
						    println("== ctxsMap (contesti registrati) ==")
						    ctxsMap.forEach { (name, info) -> println("  $name -> $info") }
						    
						observeResource("localhost","8000","ctx_cargoservice","cargoservice","changed")
						delay(1000) 
						request("loadrequest", "loadrequest(1)" ,"cargoservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="push_state_to_gui",cond=whenEvent("changed"))
					transition(edgeName="t01",targetState="push_state_to_gui",cond=whenDispatch("changed"))
				}	 
				state("push_state_to_gui") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("changed(JSONSTATE)"), Term.createTerm("changed(JSONSTATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val holdStateJson = payloadArg(0)
												// Invia il JSON a tutti i client web tramite il Manager condiviso.
												//WebSocketHandler.getInstance().sendToAll(holdStateJson)
								CommUtils.outblue("$name | Update ricevuto: $holdStateJson")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="push_state_to_gui",cond=whenEvent("changed"))
					transition(edgeName="t03",targetState="push_state_to_gui",cond=whenDispatch("changed"))
				}	 
			}
		}
} 
