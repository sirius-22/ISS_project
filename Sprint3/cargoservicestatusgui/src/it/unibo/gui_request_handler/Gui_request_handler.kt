/* Generated by AN DISI Unibo */ 
package it.unibo.gui_request_handler

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Gui_request_handler ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				var Last_PID = 0
				var Last_Request_ID = ""
				var ResponseJson = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name | Pronto a ricevere richieste DELEGATE.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handle_web_request",cond=whenRequest("loadrequest"))
				}	 
				state("handle_web_request") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("loadrequest(PID)"), Term.createTerm("loadrequest(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												Last_Request_ID = currentMsg.msgId();
												Last_PID = payloadArg(0).toInt();
								CommUtils.outblack("$name | Ricevuta richiesta DELEGATA per PID=$Last_PID. Inoltro...")
								request("loadrequest", "loadrequest($Last_PID)" ,"cargoservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="handle_load_accepted",cond=whenReply("loadaccepted"))
					transition(edgeName="t06",targetState="handle_load_rejected",cond=whenReply("loadrejected"))
				}	 
				state("handle_load_accepted") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("loadaccepted(SLOT)"), Term.createTerm("loadaccepted(SLOT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val slot = payloadArg(0);
												ResponseJson = "{\"status\":\"accepted\", \"slot\":\"$slot\", \"pid\":$Last_PID}";
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("handle_load_rejected") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("loadrejected(REASON)"), Term.createTerm("loadrejected(REASON)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val reason = payloadArg(0);
												ResponseJson = "{\"status\":\"rejected\", \"reason\":\"$reason\", \"pid\":$Last_PID}";
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
} 
