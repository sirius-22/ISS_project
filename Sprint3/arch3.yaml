services:
  # ------ UTILS -------------
  mosquitto:
    image: eclipse-mosquitto:1.6.15
    container_name: mosquitto
    environment:
      - MQTT_ALLOW_ANONYMOUS=true   # Permette connessioni anonime
    ports:
      - 1883:1883
      - 9001:9001                   # Optional:Utilizzata per WebSocket MQTT
    networks:
      - iss-network
  
  eureka:
    image: 'natbodocker/springcloud-eureka'                                     
    container_name: eurekaserver 
    ports:	
      - "8761:8761"
    environment:
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false       # Il server Eureka non si registra da solo
      - EUREKA_CLIENT_FETCH_REGISTRY=false             # Il server Eureka non recupera il registro
      #- EUREKA_SERVER_ENABLE_SELF_PRESERVATION=false   # Disabilita la modalità di auto-conservazione per testare l'auto-rimozione delle istanze
      - EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS=60
      - EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS=120
    networks:
      - iss-network
    # Aggiungiamo un healthcheck anche per Eureka per essere sicuri che sia attivo
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761"]
      interval: 10s
      timeout: 5s
      retries: 5

  #------ PRODUCTSERVICE -------------
  mongodb:
    image: mongo:6.0.4
    container_name: mongodb  
    mem_limit: 512m
    environment:
      - MONGO_INITDB_DATABASE=cargodb # Nome del database da inizializzare
    ports:
      - "27017:27017"
    networks:
      - iss-network

  cargoserviceqak:
    container_name: cargoserviceqak 
    image: docker.io/natbodocker/cargoserviceqak:1.0
    environment:
      - MONGO_HOST=mongodb
      - SERVICE_IP=192.168.1.189
    ports:
      - 8111:8111/tcp
      - 8111:8111/udp
    networks:
      - iss-network
    depends_on:
      mongodb:
        condition: service_started
      eureka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://eureka:8761/eureka/apps/CTXCARGOSERVICE"] # Assicurati che 'CARGOSERVICEQAK' sia il nome corretto
      interval: 10s
      timeout: 10s
      retries: 12
      

  # ------ CARGOSERVICE (Robot) -------------
  wenv:
    container_name: wenv
    image: docker.io/natbodocker/virtualrobotdisi25:2.2
    ports:
      - 8090:8090 
      - 8091:8091/tcp
      - 8091:8091/udp
    networks:
      - iss-network
  
  basicrobot24:
    container_name: basicrobot24
    image: pretty2/basicrobot:2.13
    mem_limit: 512m
    ports:
      - "8020:8020/tcp"
      - "8020:8020/udp"
      - "8085:8085"
    environment:
      - VIRTUAL_ENV=wenv
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
      - SERVICE_HOST=172.31.64.1
      - SERVICE_IP=172.31.64.1
      - MQTTBROKER=mosquitto
    depends_on:
      wenv:
        condition: service_started
      eureka:
        condition: service_healthy
    networks:
      - iss-network
    # L'healthcheck deve verificare la registrazione su Eureka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://eureka:8761/eureka/apps/CTXBASICROBOT"] #
      interval: 10s
      timeout: 10s
      retries: 12
  
  # ------ CARGOSERVICECORE -------------
  cargoservicecore:
    container_name: cargoservicecore
    image: cargoservice:2.0
    mem_limit: 512m
    ports:
      - "8000:8000/tcp"
      - "8000:8000/udp"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
      - SERVICE_HOST=172.31.64.1
      - SERVICE_IP=172.31.64.1
      - MQTTBROKER=mosquitto
    depends_on:
      mosquitto:
        condition: service_started
      eureka:
        condition: service_healthy
      basicrobot24:
        condition: service_healthy
      cargoserviceqak:
        condition: service_healthy
    networks:
      - iss-network

  cargoservicestatusgui:
    container_name: cargoservicestatusgui
    image: cargoservicestatusgui:1.1
    mem_limit: 512m
    ports:
      - "8001:8001/tcp"
      - "8001:8001/udp"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
      - SERVICE_HOST=172.31.64.1
      - SERVICE_IP=172.31.64.1
      - MQTTBROKER=mosquitto
    depends_on:
      mosquitto:
        condition: service_started
      eureka:
        condition: service_healthy
      basicrobot24:
        condition: service_healthy
      cargoserviceqak:
        condition: service_healthy
    networks:
      - iss-network


  cargoservicestatusgui_model:
     container_name: cargoservicestatusgui_model
     image: cargoservicestatusgui_model:1.1
     mem_limit: 512m
     ports:
       - "8080:8080" 
       - "8504:8504/tcp"
       - "8504:8504/udp"
     environment:
       - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
       - SERVICE_HOST=172.31.64.1
       - SERVICE_IP=172.31.64.1
       - MQTTBROKER=mosquitto
     depends_on:
       mosquitto:
         condition: service_started
       eureka:
         condition: service_healthy
       basicrobot24:
         condition: service_healthy
       cargoserviceqak:
         condition: service_healthy
       cargoservicestatusgui:
         condition: service_started
     networks:
       - iss-network


  # ------ VUE FRONTEND -------------
  # vue_cargoservicegui:
  #   container_name: vue_cargoservicegui
  #   image: vue_cargoservicegui
  #   # Qui devi specificare le porte corrette. Ad esempio, se la tua applicazione Vue ascolta sulla porta 8080, potresti voler esporla.
  #   # Assicurati di non avere conflitti con le altre porte già usate (es. 8000, 8001, ecc.).
  #   ports:
  #     - "5173:80" # Esempio di mappatura delle porte
  #   environment:
  #     # Se la tua app Vue ha bisogno di accedere ad altri servizi, devi configurare le variabili d'ambiente.
  #     # Ad esempio, potrebbe aver bisogno dell'URL di Eureka o di un altro servizio backend.
  #     - VUE_APP_EUREKA_URL=http://eureka:8761/eureka/
  #     - VUE_APP_MQTT_BROKER=mosquitto
  #   depends_on:
  #     # Se il frontend ha bisogno che il backend e/o Eureka siano pronti prima di avviarsi,
  #     # aggiungi le dipendenze qui.
  #     eureka:
  #       condition: service_healthy
  #     cargoservicecore:
  #       condition: service_started # O service_healthy, a seconda di come lo hai configurato
  #   networks:
  #     - iss-network

networks:
  iss-network:
    external: true

# docker compose -f arch3.yaml up 
