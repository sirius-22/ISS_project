/* Generated by AN DISI Unibo */ 
package it.unibo.mind

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Mind ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				var D = 0  
				val D_FREE = 20
				var counter = 0
				
				var prevInterval = -1
				var currentInterval = -1
				var fault = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(3000) 
						CommUtils.outblue("$name |  start")
						subscribe(  "sonardatatest" ) //mqtt.subscribe(this,topic)
						subscribeToLocalActor("sonardevice") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="work",cond=whenEvent("sonardata"))
				}	 
				state("work") { //this:State
					action { //it:State
						CommUtils.outcyan("$name | In stato WORK. In attesa di dati...")
						if( checkMsgContent( Term.createTerm("distance(D)"), Term.createTerm("distance(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  
								                D = payloadArg(0).toInt()
								                
								                currentInterval = when {
								                    D < D_FREE / 2 -> 0 // containerhere
								                    D > D_FREE     -> 1 // fault
								                    else           -> 2 // free
								                }
								
								                if (currentInterval == prevInterval) {
								                    counter++
								                } else {
								                    counter = 1
								                    prevInterval = currentInterval
								                }
								CommUtils.outcyan("$name | WORK: D=$D, interval=$currentInterval, counter=$counter")
								if(  counter >= 3 && currentInterval == 0  
								 ){CommUtils.outgreen("$name | 3 letture CONTAINER consecutive -> EMIT containerhere")
								emit("containerhere", "containerhere(hereee)" ) 
								 counter = 0  
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="check_fault_condition", cond=doswitch() )
				}	 
				state("check_fault_condition") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="fault_state_init", cond=doswitchGuarded({ counter >= 3 && currentInterval == 1  
					}) )
					transition( edgeName="goto",targetState="work_wait", cond=doswitchGuarded({! ( counter >= 3 && currentInterval == 1  
					) }) )
				}	 
				state("work_wait") { //this:State
					action { //it:State
						CommUtils.outblue("$name | Attendo il prossimo dato...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="work",cond=whenEventGuarded("sonardata",{!fault 
					}))
					transition(edgeName="t02",targetState="evaluate_resume",cond=whenEventGuarded("sonardata",{fault 
					}))
				}	 
				state("fault_state_init") { //this:State
					action { //it:State
						CommUtils.outred("$name | In FAULT_STATE -> EMIT STOPACTIONS")
						emit("stopActions", "stopActions(Stop)" ) 
						forward("ledon", "ledon(on)" ,"leddevice" ) 
						 
						 			// Resetto il contatore quando entro per la prima volta
						 			// in questo stato
						 			counter = 0; 
						 			fault = true
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work_wait", cond=doswitch() )
				}	 
				state("evaluate_resume") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("distance(D)"), Term.createTerm("distance(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 D = payloadArg(0).toInt()  
								if(  D <= D_FREE  
								 ){ counter++  
								if(  counter >= 3  
								 ){fault= false 
								}
								}
								else
								 { counter = 0  
								 }
								CommUtils.outred("$name | FAULT_STATE: D=$D, clear_counter=$counter")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work_after_resume", cond=doswitchGuarded({ !fault  
					}) )
					transition( edgeName="goto",targetState="work_wait", cond=doswitchGuarded({! ( !fault  
					) }) )
				}	 
				state("work_after_resume") { //this:State
					action { //it:State
						CommUtils.outgreen("$name | 3 letture 'clear' consecutive. EMIT resumeActions e torno al lavoro.")
						emit("resumeActions", "resumeActions(okok)" ) 
						forward("ledoff", "ledoff(of)" ,"leddevice" ) 
						 counter = 0; prevInterval = -1;  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work_wait", cond=doswitch() )
				}	 
			}
		}
} 
