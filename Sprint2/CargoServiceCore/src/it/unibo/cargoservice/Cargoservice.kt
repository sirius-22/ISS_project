/* Generated by AN DISI Unibo */ 
package it.unibo.cargoservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.domain.*
import main.java.hold.*

class Cargoservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				val MAXLOAD = 600
				
				//product weight
				var Weight = 0
				
				var rejected = false
				
				//var Name = "NONE"
				var PID:Int? = 0
				
				var TotWeight = 0!!
				
				var JSonString = ""
				var PName = "" 
				
				// SlotManagenegement
				
				var SlotMng = SlotManagement()
				var SlotName = "NONE"
		
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						subscribeToLocalActor("sonar_mock") 
						subscribeToLocalActor("sonar_mock") 
						subscribeToLocalActor("sonar_mock") 
						discardMessages = false
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_idle") { //this:State
					action { //it:State
						CommUtils.outblack("[CargoService] Idle...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t029",targetState="state_handle_stop",cond=whenEvent("stopActions"),interruptedStateTransitions)
					transition(edgeName="t030",targetState="state_handle_slots",cond=whenRequest("loadrequest"))
				}	 
				state("state_handle_stop") { //this:State
					action { //it:State
						CommUtils.outyellow("[CargoService] Ho ricevuto un evento di stop dal sonar in attesa di resume...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t331",targetState="state_handle_resume",cond=whenEvent("resumeActions"))
				}	 
				state("state_handle_resume") { //this:State
					action { //it:State
						CommUtils.outred("[CargoService] returning from interrupt...")
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("state_handle_slots") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("loadrequest(PID)"), Term.createTerm("loadrequest(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												PID = payloadArg(0).toInt()
												
						}
						CommUtils.outmagenta("[CargoService] | PID = $PID")
						CommUtils.outblue("[CargoService] Richiesta di slot liberi a slotmng...")
						 SlotName = SlotMng.freeSlot() 
						forward("resume", "resume(gormiti)" ,name ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t132",targetState="state_handle_stop",cond=whenEvent("stopActions"),interruptedStateTransitions)
					transition(edgeName="t133",targetState="state_handle_slot_name",cond=whenDispatch("resume"))
				}	 
				state("state_handle_slot_name") { //this:State
					action { //it:State
						if( 
									SlotName.equals("NONE")
						 ){CommUtils.outred("[CargoService] Non ci sono slot disponibili LOADREJECTED")
						answer("loadrequest", "loadrejected", "loadrejected(no_slots)"   )  
						rejected=true 
						}
						else
						 {CommUtils.outred("[CargoService] slot disponibile $SlotName continuo i controlli")
						 rejected=false 
						 }
						forward("resume", "resume(gormiti)" ,name ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t034",targetState="state_handle_stop",cond=whenEvent("stopActions"),interruptedStateTransitions)
					transition(edgeName="t035",targetState="state_handle_load",cond=whenDispatchGuarded("resume",{!rejected 
					}))
					transition(edgeName="t036",targetState="state_idle",cond=whenDispatchGuarded("resume",{rejected 
					}))
				}	 
				state("state_handle_load") { //this:State
					action { //it:State
						CommUtils.outblue("[CargoService] | state_handle_load")
						request("getProduct", "product($PID)" ,"productservice" )  
						CommUtils.outgreen("[CargoService] | getProduct sent")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t137",targetState="state_handle_stop",cond=whenEvent("stopActions"),interruptedStateTransitions)
					transition(edgeName="t138",targetState="state_handle_product",cond=whenReply("getProductAnswer"))
				}	 
				state("state_handle_product") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("product(JSonString)"), Term.createTerm("product(JSonString)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												JSonString = payloadArg(0).toString()		
						}
						CommUtils.outblue("[CargoService] | state_handle_product")
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outmagenta("stringa json: $JSonString")
						
									var p = Product(JSonString)
									Weight=p.getWeight()	
									PName = p.getName()
						CommUtils.outgreen("[CargoService] | Weight: $Weight")
						if(  (Weight == 0 && PName == "wrong" )  
						 ){CommUtils.outred("[CargoService] | PID inesistente: loadrejected")
						 rejected = true 
						answer("loadrequest", "loadrejected", "loadrejected(no_PID)"   )  
						}
						else
						 {CommUtils.outgreen("[CargoService] | Prodotto trovato e peso registrato, continuo i controlli...")
						  rejected = false 
						  TotWeight = SlotMng.totalWeightReq() 
						 }
						forward("resume", "resume(gormiti)" ,name ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t439",targetState="state_handle_stop",cond=whenEvent("stopActions"),interruptedStateTransitions)
					transition(edgeName="t440",targetState="state_idle",cond=whenDispatchGuarded("resume",{rejected 
					}))
					transition(edgeName="t441",targetState="state_handle_weight",cond=whenDispatchGuarded("resume",{! rejected  
					}))
				}	 
				state("state_handle_weight") { //this:State
					action { //it:State
						if( 
											
											Weight.plus(TotWeight) <= MAXLOAD!!
											
						 ){answer("loadrequest", "loadaccepted", "loadaccepted($SlotName)"   )  
						rejected=false 
						CommUtils.outgreen("[Cargoservice] | loadaccepted")
						}
						else
						 {answer("loadrequest", "loadrejected", "loadrejected(too_heavy)"   )  
						 CommUtils.outred("[Cargoservice] | loadrejected")
						 rejected=true 
						 forward("resume", "resume(reject)" ,name ) 
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t242",targetState="state_handle_stop",cond=whenEvent("stopActions"),interruptedStateTransitions)
					transition(edgeName="t243",targetState="state_idle",cond=whenDispatch("resume"))
					transition(edgeName="t244",targetState="state_moverobot",cond=whenEventGuarded("containerhere",{!rejected 
					}))
				}	 
				state("state_moverobot") { //this:State
					action { //it:State
						request("loadcontainer", "loadcontainer($SlotName)" ,"cargorobot" )  
						CommUtils.outblue("[Cargoservice] | loadcontainer sent with name $SlotName")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t045",targetState="state_update_hold",cond=whenReply("containerloaded"))
				}	 
				state("state_update_hold") { //this:State
					action { //it:State
						CommUtils.outyellow("[Cargoservice] | aggiornamento stiva, Dati = PID:$PID, Weight:$Weight, PName:$PName, SlotName:$SlotName")
							
									val safeWeight = requireNotNull(Weight)
									var prod = Product(PID!!, PName, safeWeight)
									SlotMng.updateHold(prod, SlotName)
									
						forward("sonaractivate", "sonaractivate(A)" ,"sonar_mock" ) 
						forward("restart", "restart(M)" ,"sonar_mock" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
			}
		}
} 
