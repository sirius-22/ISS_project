/* Generated by AN DISI Unibo */ 
package it.unibo.mind

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Mind ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 
				var D = 0  
				val D_FREE = 20
				val countConfr = 1
				val fault = false
				
				//0 = containerhere
				//1 = stopActions
				//2 = resumeActions
				
				val prevInterval = -1
				val currentInterval = -1
				
				
				
				
		   	 	val logger = LoggerFactory.getLogger("mind_actor") 
		 	 	
		 	 	
		 	 	fun getCurrentDateTimeString(): String {
				    val currentDateTime = java.time.LocalDateTime.now()
				    val formatter = java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss") //I : non vanno bene per Prolog
				    return currentDateTime.format(formatter)
				}
		 	   
		 	   /*
			   * Pulizia del log file locale definito in logback.xml
			   */
			  clearlog("./logs/app_sonarled2025.log")   
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(1000) 
						CommUtils.outblack("$name |  start")
						subscribeToLocalActor("sonarsimul") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						CommUtils.outcyan("$name | waiting data...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleSonardata",cond=whenEvent("sonardata"))
				}	 
				state("handleSonardata") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("distance(D)"), Term.createTerm("distance(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  D = payloadArg(0).toInt()  
								CommUtils.outcyan("$name | handleSonardata D=$D")
								if(   D < D_FREE/2   
								 ){ currentInterval = 0 
								if(  currentInterval == prevInterval  
								 ){}
								CommUtils.outmagenta("$name | misurazione $countConfr")
								}
								if(  D >= D1   
								 ){CommUtils.outmagenta("$name | ledoff")
								}
								if(  D < D1 && D >= D2  
								 ){forward("doblink", "doblink(ok)" ,name ) 
								}
								 logger.info(  sysUtil.logStr(name,"mind(distance($D))","sonarled")  )  
								emit("unibologprolog", "unibologprolog($MyName,sonarled,distance($D))" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="blink",cond=whenDispatch("doblink"))
					transition(edgeName="t02",targetState="handleSonardata",cond=whenEvent("sonardata"))
				}	 
				state("blink") { //this:State
					action { //it:State
						 val T = "'"+getCurrentDateTimeString()+"'"  
						CommUtils.outmagenta("$name | blinking $T")
						  machineExec("python ledPython25Blink.py")  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="handleSonardata",cond=whenEvent("sonardata"))
				}	 
			}
		}
} 
